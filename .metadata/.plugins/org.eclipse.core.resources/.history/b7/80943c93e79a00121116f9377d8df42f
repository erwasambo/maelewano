package com.kiko.softwareltd;

import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;
import android.hardware.Camera.ShutterCallback;
import android.os.Bundle;
import android.os.Environment;
import android.view.View;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.Toast;

public class CameraAppActivity extends Activity{
    private Bitmap bmp=null;
    ProgressDialog pg=null;
    private Preview preview;
    Button click_button,try_again_button;
    int buttonpress = 1;
    
    ArrayList<int[]> drawnHistList;
    //private boolean interpreting = false;
    @Override
    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setContentView(R.layout.camera_layout);
 
        preview=new Preview(this);
        ((FrameLayout) findViewById(R.id.preview)).addView(preview);
        findViewById(R.id.preview).setVisibility(View.VISIBLE);
        
 
        ButtonListener listener=new ButtonListener();
        click_button=((Button) findViewById(R.id.capture_button));
        click_button.setVisibility(View.VISIBLE);
        click_button.setOnClickListener(listener);
 
        try_again_button=((Button) findViewById(R.id.recapture_button));
        try_again_button.setVisibility(View.GONE);
        try_again_button.setOnClickListener(listener);
        
        
 
    }
 
    private class ButtonListener implements View.OnClickListener{
 
        @Override
        public void onClick(View v) {
            if(v.equals(findViewById(R.id.capture_button))){
            	
            	try_again_button.setVisibility(View.VISIBLE);
                click_button.setVisibility(View.GONE);
                takepictures();

            }
                // TODO preview.camera.takePicture(shutterCallback, rawCallback, jpegCallback); }
            else if(v.equals(findViewById(R.id.recapture_button))){
                findViewById(R.id.preview).setVisibility(View.VISIBLE);
                preview.camera.stopPreview();
                
                
                try_again_button.setVisibility(View.GONE);
                click_button.setVisibility(View.VISIBLE);
            	finish();
            	/*//startActivity(new Intent("com.kiko.softwareltd.home"));
            	//buttonpress = 0;
            	
                findViewById(R.id.preview).setVisibility(View.VISIBLE);
                preview.camera.startPreview();
                
                
                try_again_button.setVisibility(View.GONE);
                click_button.setVisibility(View.VISIBLE);
                //interpreting = false;
*/            	
            	}
        }
 
    }
 
    ShutterCallback shutterCallback = new ShutterCallback() {
        public void onShutter() {
            //Log.d(TAG, "onShutter'd");
            System.out.println("In ShutterCallback");
        }
        
    };
 
    /** Handles data for raw picture */
    PictureCallback rawCallback = new PictureCallback() {
        public void onPictureTaken(byte[] data, Camera camera) {
            if(data!=null){
                bmp=BitmapFactory.decodeByteArray(data,0,data.length);
                
 
                if(pg!=null)
                    pg.dismiss();
                
                click_button.setVisibility(View.GONE);
                try_again_button.setVisibility(View.VISIBLE);
            }
        }
    };
    /** Handles data for jpeg picture */
    PictureCallback jpegCallback = new PictureCallback() {
        public void onPictureTaken(byte[] data, Camera camera) {
            if(data!=null){
                bmp=BitmapFactory.decodeByteArray(data,0,data.length);
                /*findViewById(R.id.img).setVisibility(View.VISIBLE);
                ((ImageView)findViewById(R.id.img)).setImageBitmap(bmp);
                findViewById(R.id.preview).setVisibility(View.GONE);*/
                
                if(pg!=null)
                    pg.dismiss();
                
                click_button.setVisibility(View.GONE);
                try_again_button.setVisibility(View.VISIBLE);
                
                File pictureFileDir = getDir();

                if (!pictureFileDir.exists() && !pictureFileDir.mkdirs()) {
                  /*Toast.makeText(getApplicationContext(), "Can't create directory to save image.",
                      Toast.LENGTH_LONG).show();*/
                  return;

                }

                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyymmddhhmmss");
                String date = dateFormat.format(new Date());

                try {
                	//Bitmap myBitmap = BitmapFactory.decodeByteArray(data, 0, data.length);
            		//Bitmap outBitmap  = New Bitmap();
                	//starthistogramthread(bmp);
                	//drawnHistList = imageHistogram(outBitmap);
                	
            		//((ImageView)findViewById(R.id.img)).setImageBitmap(myBitmap);
            		//Toast.makeText(getBaseContext(), "the red histogram is " + drawnHistList, Toast.LENGTH_LONG).show();

                  
                  //Get the saved image and turn it to greyscale
                 /* if(imageFile.exists()){
                		//load the image from the file
                		Bitmap myBitmap = BitmapFactory.decodeFile(interpretImg);
                		Bitmap outBitmap  = doGreyscale(myBitmap);
                		((ImageView)findViewById(R.id.img)).setImageBitmap(outBitmap);
                  }*/

                  //End of Caveat
                } catch (Exception error) {
                  
                }finally{
                	bmp.recycle();
                	preview.camera.startPreview();
                	//takepictures();
                }
            }
        	
        }
    };
    
   
    public static Bitmap doGreyscale(Bitmap src) {
        // constant factors
        final double GS_RED = 0.299;
        final double GS_GREEN = 0.587;
        final double GS_BLUE = 0.114;
     
        // create output bitmap
        Bitmap bmOut = Bitmap.createBitmap(src.getWidth(), src.getHeight(), src.getConfig());
        // pixel information
        int A, R, G, B;
        int pixel;
     
        // get image size
        int width = src.getWidth();
        int height = src.getHeight();
     
        // scan through every single pixel
        for(int x = 0; x < width; ++x) {
            for(int y = 0; y < height; ++y) {
                // get one pixel color
                pixel = src.getPixel(x, y);
                // retrieve color of all channels
                A = Color.alpha(pixel);
                R = Color.red(pixel);
                G = Color.green(pixel);
                B = Color.blue(pixel);
                // take conversion up to one single value
                R = G = B = (int)(GS_RED * R + GS_GREEN * G + GS_BLUE * B);
                // set new pixel color to output bitmap
                //bmOut.setPixel(x, y, Color.argb(A, R, G, B));
                bmOut.setPixel(x, y, Color.rgb(R, G, B));
                
            }
        }
        
        // return final image
        return bmOut;
    }

    private File getDir() {
        File sdDir = Environment.getExternalStorageDirectory();
 
        return new File(sdDir, "Maelewano");
    }
    
    
    public void saveImage(){
     
        
    }
    
    // Return an ArrayList containing histogram values for separate R, G, B channels
    public static ArrayList<int[]> imageHistogram(Bitmap input) {
    	//public static ArrayList<int[]> imageHistogram(Bitmap input) {
        int[] rhistogram = new int[256];
        int[] ghistogram = new int[256];
        int[] bhistogram = new int[256];
		
		int pixel;
		
        for(int i=0; i<rhistogram.length; i++) rhistogram[i] = 0;
        for(int i=0; i<ghistogram.length; i++) ghistogram[i] = 0;
        for(int i=0; i<bhistogram.length; i++) bhistogram[i] = 0;
     
        for(int i=0; i<input.getWidth(); i++) {
            for(int j=0; j<input.getHeight(); j++) {
				//get one pixel color
				pixel = input.getPixel(i, j);
				
                int red = Color.red(pixel);
                int green = Color.green(pixel);
                int blue = Color.blue(pixel);
                
                // Increase the values of colors
                rhistogram[red]++; ghistogram[green]++; bhistogram[blue]++;
            }
        }
     
        ArrayList<int[]> hist = new ArrayList<int[]>();
        
        hist.add(rhistogram);
        hist.add(ghistogram);
        hist.add(bhistogram);
        
        return hist;
     
    }
    /*private void starthistogramthread(Bitmap bmpobje){
    	
    	Thread Timer = new Thread(){
        	public void run(){
        		while(buttonpress>0){
				
					drawnHistList = imageHistogram(bmpobje);			
				}
    }
};
   Timer.start();
   
    }*/
    
    
    
    
    public void takepictures() {

   
    	Thread Timer = new Thread(){
        	public void run(){
        		try{
        			while(buttonpress>0){
        			
        			sleep(5000);
        			preview.camera.takePicture(shutterCallback, rawCallback, jpegCallback);
        			//Toast.makeText(getApplicationContext(), "Taking photos", Toast.LENGTH_LONG).show();
        			sleep(1000);
        			//preview.camera.stopPreview();
        			
        			}
        			}

        		catch (InterruptedException e){
        			e.printStackTrace();

        		}
    }
};
   Timer.start();
   
    	}

    
}